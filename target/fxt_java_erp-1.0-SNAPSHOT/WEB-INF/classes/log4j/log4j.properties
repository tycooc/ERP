# level : 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。
#Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。
#Log4jTest.java中的Logger logger = Logger.getLogger(this.getClass().getName());可能对应了log4j.rootLogger=DEBUG,CONSOLE,A1的配置
log4j.rootLogger=INFO,D,E,stdout

##########控制台输出##############
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%p]-[%C %M %L]:%m%n
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%p]-%m%n

#######配置hibernate日志输入目录,暂时没有使用到############
#log4j.logger.org.hibernate = OFF,hibernate
#log4j.logger.org.hibernate.tool.hbm2ddl=debug
#log4j.appender.hibernate = org.apache.log4j.RollingFileAppender
#log4j.appender.hibernate.file = ${webApp.log4j.path}/logs/fxt_hibernate.log
#log4j.appender.hibernate.layout = org.apache.log4j.PatternLayout
#log4j.appender.hibernate.layout.conversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%p]-[%C %M %L]:%m%n
#log4j.appender.hibernate.layout.conversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%p]-%m%n
#log4j.appender.hibernate.append = false

###输出到日志文件指定最低为INFO级别 ###
log4j.appender.D=org.apache.log4j.RollingFileAppender
log4j.appender.D.File=${webApp.log4j.path}/logs/fxt-info.log
log4j.appender.D.MaxFileSize=50MB
log4j.appender.D.MaxBackupIndex=10
##the lower level
log4j.appender.D.Threshold=INFO 
log4j.appender.D.layout=org.apache.log4j.PatternLayout
#log4j.appender.D.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [%p]-[%C %M %L]:%m%n
log4j.appender.D.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [%p]-%m%n

###输出错误信息内容到指定文件ERROR级别###
log4j.appender.E= org.apache.log4j.RollingFileAppender
log4j.appender.E.File=${webApp.log4j.path}/logs/fxt-error.log
log4j.appender.E.MaxFileSize=50MB
log4j.appender.E.MaxBackupIndex=10 
log4j.appender.E.Threshold = ERROR 
log4j.appender.E.layout = org.apache.log4j.PatternLayout
##log4j.appender.E.layout.ConversionPattern =%-d{yyyy-MM-dd HH\:mm\:ss} [%p]-[%C %M %L]\:%m%n 
log4j.appender.E.layout.ConversionPattern =%-d{yyyy-MM-dd HH\:mm\:ss} [%p]-%m%n
#  %n代表换行
#  %d代表日期
#  %c代表路径名（Logger.getLogger("DAO")时为DAO:，Logger.getLogger(this.getClass().getName())时为绝对类名）#  %c{1}为类名，如Log4jTest
#  %l代表类路径及代码所在行数，%L仅代表代码所在行数
#  [%-5p]代表该日志对应的日志级别（%5p），如DEBUG,ERROR，中间的-起到在[]中左对齐的作用
#  %m代表“类名:”（Logger.getLogger("DAO")时为DAO:，Logger.getLogger(this.getClass().getName())时为类名）及日志信息
#----------------------------------------------------------------------------------
#分别说明如下：
#1、使用Logger logger = Logger.getLogger("DAO")获得配置时，属性文件中必须要有对应设置：log4j.logger.DAO=DEBUG,A2
#2、%c为DAO
#3、%l为logger.debug("DAO: Debug info.");的类绝对路径以及代码所在行，
#   log.DAOlogTest.doGet(DAOlogTest.java:23)
#4、%L为logger.debug("DAO: Debug info.");代码所在行 23
#5、%m为类名和日志信息     DAO: Debug info.
#1、使用Logger logger = Logger.getLogger(this.getClass().getName())获得配置时
#2、%c为log.Log4jTest    %c{1}为Log4jTest
#3、%l为 log.Log4jTest.doGet(Log4jTest.java:23)
#4、%L同上
#5、%m为 Debug info.
#－X号: X信息输出时左对齐；
#%p: 日志信息级别
#%d{}: 日志信息产生时间
#%c: 日志信息所在地（类名）
#%m: 产生的日志具体信息
#%n: 输出日志信息换行
